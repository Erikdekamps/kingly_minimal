{#
/**
 * @file
 * Component template for a card.
 *
 * This component now acts as a "composer", assembling other SDCs (image, text,
 * button) based on the props it receives. This data-driven approach results
* in cleaner, more predictable markup.
 *
 * @see kingly_minimal/components/card/card.component.yml
 *
 * @props
 * - image: (Optional) An object of props for the `kingly_minimal:image` component.
 * - title: (Optional) The heading for the card.
 * - url: (Optional) A URL to make the title a link.
 * - body: (Optional) The main text content for the card.
 * - button: (Optional) An object of props for the `kingly_minimal:button` component.
 * - attributes: A Drupal attributes object for the root element.
 */
#}
<article{{ attributes.addClass('card') }}>

  {% if image.src or image.render_array %}
    <div class="card__image">
      {# Delegate image rendering to the image component for consistency. #}
      {{ include('kingly_minimal:image', image, with_context=false) }}
    </div>
  {% endif %}

  <div class="card__content">
    {% if title %}
      <h3 class="card__title">
        {% if url %}
          <a href="{{ url }}" class="card__title-link">{{ title }}</a>
        {% else %}
          {{ title }}
        {% endif %}
      </h3>
    {% endif %}

    {% if body %}
      <div class="card__body">
        {# Delegate body rendering to the text component for consistent prose styling. #}
        {{ include('kingly_minimal:text', {
          content: body,
          attributes: create_attribute().addClass('card__body-text')
        }, with_context=false) }}
      </div>
    {% endif %}
  </div>

  {% if button.text %}
    <div class="card__actions">
      {# Delegate button rendering to the button component. #}
      {{ include('kingly_minimal:button', button, with_context=false) }}
    </div>
  {% endif %}

</article>
