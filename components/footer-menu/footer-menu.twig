{#
/**
 * @file
 * Theme override for the footer menu block.
 *
 * This component acts as a wrapper. It renders the semantic <nav> element
 * and then includes the `kingly_minimal:menu` component to render the menu
 * tree itself. The specific styling for the footer context is applied by
 * this component's own stylesheet.
 *
 * @see kingly_minimal/components/footer-menu/footer-menu.component.yml
 */
#}
{% set heading_id = attributes.id ~ '-label' %}
{% set nav_attributes = create_attribute() %}

{#
Conditionally set the accessible name for the navigation.
- If a label exists, use aria-labelledby to point to the visually hidden h2.
- If no label exists, provide a fallback aria-label to prevent an empty name.
#}
{% if label %}
  {% do nav_attributes.setAttribute('aria-labelledby', heading_id) %}
{% else %}
  {% do nav_attributes.setAttribute('aria-label', 'Footer menu'|t) %}
{% endif %}

<nav{{ attributes.addClass('block', 'block-menu').merge(nav_attributes) }} role="navigation">
  {#
  Print the block title as a visually hidden heading. This provides an
  accessible name for the <nav> element via aria-labelledby.
  This is only printed if the label is provided.
  #}
  {{ title_prefix }}
  {% if label %}
    <h2{{ title_attributes.addClass('visually-hidden') }} id="{{ heading_id }}">{{ label }}</h2>
  {% endif %}
  {{ title_suffix }}

  {#
  We include our generic `menu` SDC. This component's `footer-menu.scss` will
  automatically apply the necessary contextual style overrides.
  #}
  {% if content['#items'] %}
    {{ include('kingly_minimal:menu', {
      items: content['#items'],
      attributes: content['#attributes'],
    }, with_context = false) }}
  {% endif %}
</nav>
