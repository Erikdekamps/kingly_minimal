{#
/**
 * @file
 * Dispatcher component for media entities.
 *
 * This component inspects the media entity's bundle and includes the
 * corresponding sub-component using an if/elseif chain.
 *
 * This version uses `include` and passes the rendered content down as a prop
 * to prevent a recursive loop that causes memory exhaustion.
 *
 * @see kingly_minimal/components/media/media.component.yml
 *
 * @props
 * - media_entity: The full media entity object.
 * - attributes: A Drupal attributes object for the wrapper element.
 *
 * @slots
 * - content: The rendered media entity.
 */
#}
{% if media_entity %}
  {% set media_type = media_entity.bundle() %}

  {# Capture the content from the slot into a variable first. #}
  {% set rendered_content %}
    {% block content %}{% endblock %}
  {% endset %}

  {# Use an if/elseif chain to include the correct component. #}
  {% if media_type == 'audio' %}
    {{ include('kingly_minimal:media--audio', {
      attributes: attributes,
      media_entity: media_entity,
      content: rendered_content,
    }, with_context = false) }}
  {% elseif media_type == 'document' %}
    {{ include('kingly_minimal:media--document', {
      attributes: attributes,
      media_entity: media_entity,
      content: rendered_content,
    }, with_context = false) }}
  {% elseif media_type == 'image' %}
    {{ include('kingly_minimal:media--image', {
      attributes: attributes,
      media_entity: media_entity,
      content: rendered_content,
    }, with_context = false) }}
  {% elseif media_type == 'remote_video' %}
    {{ include('kingly_minimal:media--remote-video', {
      attributes: attributes,
      media_entity: media_entity,
      content: rendered_content,
    }, with_context = false) }}
  {% elseif media_type == 'svg_image' %}
    {{ include('kingly_minimal:media--svg-image', {
      attributes: attributes,
      media_entity: media_entity,
      content: rendered_content,
    }, with_context = false) }}
  {% elseif media_type == 'video' %}
    {{ include('kingly_minimal:media--video', {
      attributes: attributes,
      media_entity: media_entity,
      content: rendered_content,
    }, with_context = false) }}
  {% else %}
    {# Fallback for any unhandled media types. #}
    <div{{ attributes.addClass('media--unhandled') }}>
      {{ rendered_content }}
    </div>
  {% endif %}
{% endif %}
