{#
/**
 * @file
 * Component template for the slideshow.
 *
 * This template provides the HTML structure required by Splide.js. It has been
 * refactored to allow Splide to generate its own arrows, which are then
 * visually repositioned into the header using CSS for a clean layout.
 *
 * The `data-` attributes are used to pass configuration from the props to the
 * component's JavaScript behavior.
 *
 * @see kingly_minimal/components/slideshow/slideshow.component.yml
 *
 * @props
 * - uuid: A unique ID for this slideshow instance.
 * - title: The main heading for the slideshow.
 * - columns_mobile: The number of slides to show per page on mobile.
 * - columns_tablet: The number of slides to show per page on tablet.
 * - columns_desktop: The number of slides to show per page on desktop.
 * - attributes: A Drupal attributes object for the root wrapper element.
 *
 * @slots
 * - content: The slot for the <li> slide items.
 */
#}
<div{{ attributes.addClass('slideshow') }}>
  {#
  This is the main Splide container. It now wraps everything.
  We attach a unique ID for the JS to target and data attributes to hold our
  responsive settings.
  #}
  <div
    class="splide"
    id="splide-{{ uuid }}"
    role="region"
    aria-label="{{ title|default('Slideshow')|t }}"
    data-columns-mobile="{{ columns_mobile }}"
    data-columns-tablet="{{ columns_tablet }}"
    data-columns-desktop="{{ columns_desktop }}"
  >
    <div class="slideshow__header">
      {% if title %}
        <h2 class="slideshow__title">{{ title }}</h2>
      {% endif %}
      {# This empty div is now just a placeholder. Splide's arrows will be
         appended here by the `mount()` function in our JavaScript. #}
    </div>

    <div class="splide__track">
      <ul class="splide__list">
        {# The individual slide <li> elements will be rendered here. #}
        {% block content %}{% endblock %}
      </ul>
    </div>
  </div>
</div>
