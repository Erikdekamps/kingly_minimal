<?php

/**
 * @file
 * Functions to support theming in the Kingly Minimal theme.
 */

/**
 * Implements hook_preprocess_html().
 *
 * This hook is used to dynamically inject CSS overrides for the color
 * settings configured in the theme UI.
 */
function kingly_minimal_preprocess_html(array &$variables): void {
  // Generate the dynamic CSS for all color overrides from theme settings.
  $color_css = _kingly_minimal_generate_color_css();

  // If there are no overrides, do nothing.
  if (empty($color_css)) {
    return;
  }

  // Attach the generated CSS to the head of the document.
  $variables['#attached']['html_head'][] = [
    [
      '#tag' => 'style',
      '#value' => $color_css,
      // Ensure this inline style is cached and invalidated when settings change.
      '#cache' => [
        'tags' => ['config:kingly_minimal.settings'],
      ],
    ],
    // A unique key for this attachment.
    'kingly-minimal-color-settings',
  ];
}

/**
 * Gathers all color setting definitions.
 *
 * This helper function centralizes the mapping of theme setting keys to their
 * corresponding CSS Custom Properties, default values, and component selectors.
 * It serves as the single source of truth for both the theme settings form
 * and the dynamic CSS generation.
 *
 * @return array
 *   An associative array defining all color settings.
 */
function _kingly_minimal_get_color_definitions(): array {
  $colors = [
    // -------------------------------------------------------------------------
    // Global Colors
    // -------------------------------------------------------------------------
    'color_text' => [
      'property' => '--color-text',
      'default' => '#222222',
      'selector' => 'body',
    ],
    'color_background' => [
      'property' => '--color-background',
      'default' => '#ffffff',
      'selector' => 'body',
    ],
    'color_primary' => [
      'property' => '--color-primary',
      'default' => '#004a94',
      'selector' => 'body',
    ],
    'color_primary_hover' => [
      'property' => '--color-primary-hover',
      'default' => '#003b76',
      'selector' => 'body',
    ],
    'color_border' => [
      'property' => '--color-border',
      'default' => '#e1e1e1',
      'selector' => 'body',
    ],
    'color_light_gray' => [
      'property' => '--color-light-gray',
      'default' => '#f4f5f6',
      'selector' => 'body',
    ],
    'color_rating' => [
      'property' => '--color-rating',
      'default' => '#f59e0b',
      'selector' => 'body',
    ],
    'focus_ring_color' => [
      'property' => '--focus-ring-color',
      'default' => '#004a94',
      'selector' => 'body',
    ],
    'color_status' => [
      'property' => '--color-status',
      'default' => '#e6f4ea',
      'selector' => 'body',
    ],
    'color_status_text' => [
      'property' => '--color-status-text',
      'default' => '#0d4f21',
      'selector' => 'body',
    ],
    'color_status_border' => [
      'property' => '--color-status-border',
      'default' => '#d0e8d8',
      'selector' => 'body',
    ],
    'color_warning' => [
      'property' => '--color-warning',
      'default' => '#fff8e1',
      'selector' => 'body',
    ],
    'color_warning_text' => [
      'property' => '--color-warning-text',
      'default' => '#614d00',
      'selector' => 'body',
    ],
    'color_warning_border' => [
      'property' => '--color-warning-border',
      'default' => '#f2eacb',
      'selector' => 'body',
    ],
    'color_error' => [
      'property' => '--color-error',
      'default' => '#fdecea',
      'selector' => 'body',
    ],
    'color_error_text' => [
      'property' => '--color-error-text',
      'default' => '#8c101c',
      'selector' => 'body',
    ],
    'color_error_border' => [
      'property' => '--color-error-border',
      'default' => '#eecfca',
      'selector' => 'body',
    ],
    // -------------------------------------------------------------------------
    // Layout Colors
    // -------------------------------------------------------------------------
    'footer_background_color' => [
      'property' => '--footer-bg-color',
      'default' => '#f4f5f6',
      'selector' => 'body .page-footer',
    ],
    'footer_text_color' => [
      'property' => '--footer-text-color',
      'default' => '#222222',
      'selector' => 'body .page-footer',
    ],
    'footer_border_color' => [
      'property' => '--footer-border-color',
      'default' => '#e1e1e1',
      'selector' => 'body .page-footer',
    ],
  ];

  // Add a dark variant for each color setting.
  foreach ($colors as $key => $color) {
    $colors['dark_' . $key] = $color;
  }

  // Add title based on the key of the color setting by replacing underscores
  // with spaces as translatable strings.
  foreach ($colors as $key => $color) {
    $colors[$key]['title'] = t(ucfirst(str_replace('_', ' ', $key)));
  }

  // Prefix all selectors with data-theme based on the key.
  foreach ($colors as $key => $color) {
    // If key starts with 'dark_', use 'dark' as the theme otherwise use light.
    $theme = strpos($key, 'dark_') === 0 ? 'dark' : 'light';
    $colors[$key]['selector'] = '[data-theme="' . $theme . '"] ' . $color['selector'];
  }

  return $colors;
}

/**
 * Generates CSS for color overrides based on theme settings.
 *
 * This function iterates through all defined color settings, checks if a value
 * has been set by the user, and if it differs from the default. It then groups
 * the resulting CSS rules by their selector for efficient output.
 *
 * @return string
 *   The generated CSS string, or an empty string if no overrides are needed.
 */
function _kingly_minimal_generate_color_css(): string {
  $definitions = _kingly_minimal_get_color_definitions();
  $css_by_selector = [];

  foreach ($definitions as $setting_name => $details) {
    $value = theme_get_setting($setting_name);

    // Only add a rule if the value exists and is different from the default.
    if (!empty($value) && strtolower($value) !== strtolower($details['default'])) {
      $css_value = $value;
      // Handle special cases where the color value needs to be embedded in an
      // SVG data URI.
      if (!empty($details['is_svg_color'])) {
        // URL-encode the hex value to be safely used in a data URI.
        $encoded_color = rawurlencode($value);
        $css_value = str_replace('{COLOR}', $encoded_color, $details['svg_template']);
      }

      // If the form type is textfield, the value is used directly. For colors,
      // it's a CSS variable assignment.
      $css_by_selector[$details['selector']][] = $details['property'] . ': ' . $css_value . ';';
    }
  }

  if (empty($css_by_selector)) {
    return '';
  }

  // Build the final CSS string.
  $final_css = '';
  foreach ($css_by_selector as $selector => $rules) {
    $final_css .= $selector . ' { ' . implode(' ', $rules) . ' }' . "\n";
  }

  return $final_css;
}
