// kingly_minimal/scss/layout/page.scss

// This is an entry point file. It will be compiled by Vite.
// This includes the reset styles in our compiled CSS.
@use '../base/reset';

// -----------------------------------------------------------------------------
// Main Page Layout
// -----------------------------------------------------------------------------

.layout-container {
  display: grid;
  // Defines a three-row grid: wrapper, main, footer.
  // The 'main' content area (1fr) takes up all available vertical space.
  grid-template-rows: auto 1fr auto;
  // Defines three columns: a flexible gutter, a max-width content column,
  // and another flexible gutter. The gutters will not shrink below the
  // --container-padding value.
  grid-template-columns: minmax(var(--container-padding), 1fr) minmax(0, var(--container-max-width)) minmax(var(--container-padding), 1fr);
  // Establish a base min-height to ensure the footer is always at the bottom
  // of the viewport, even on short pages. This applies to all users.
  min-height: 100vh;
}

// --- Grid Placement ---
// The .page-header-wrapper and .page-footer are direct children of the grid
// and are made to span all three columns, making them full-bleed.
.page-header-wrapper,
.page-footer {
  grid-column: 1 / -1;
}

// The .main-content is constrained to the central content column.
.main-content {
  grid-column: 2;
  // Prevent wide content from breaking the grid layout.
  min-width: 0;
}


// --- Subgrid for Header Wrapper ---
// The wrapper becomes a subgrid, inheriting the parent's column tracks.
// This allows us to place its children precisely on the main grid lines.
.page-header-wrapper {
  display: grid;
  grid-template-columns: subgrid;
}

// Now, place the items *within* the subgrid.
.page-header-wrapper > .page-header {
  grid-column: 2; // Constrain the header to the content column.
  min-width: 0;
}
.page-header-wrapper > .region-breadcrumbs {
  grid-column: 1 / -1; // Let the breadcrumbs be full-bleed within the subgrid.
}


// --- Styles for Main Content Grid ---
// This is the inner grid for regions inside the <main> element.
.main-content {
  display: grid;
  // A standard 12-column grid for flexible content layout.
  grid-template-columns: repeat(12, 1fr);
  gap: var(--spacing-md);
  // Ensure the grid starts at the top of its allocated space.
  align-content: start;

  // By default, direct children of the main content grid (our regions)
  // should span all 12 columns.
  > * {
    grid-column: 1 / -1;
  }
}

// -----------------------------------------------------------------------------
// Admin Toolbar Integration
// -----------------------------------------------------------------------------

// For logged-in users, adjust the layout container's height to account for the
// Gin admin toolbar. This rule is more specific and overrides the base min-height.
body.gin--horizontal-toolbar .layout-container {
  min-height: calc(100vh - var(--gin-toolbar-height, 0px) - var(--gin-toolbar-secondary-height, 0px));
}

// -----------------------------------------------------------------------------
// Responsive Adjustments
// -----------------------------------------------------------------------------

@media (min-width: 768px) { // md breakpoint
  .main-content {
    gap: var(--spacing-lg);
    padding-block-end: var(--spacing-lg);
  }
}
